print(category_counts_tables)
# sumerize the numercial columns
# Résumé des colonnes Budget, Revenu, Imdb_Rating, Imdb_Votes, Wins, Nominations
numerical_summary <- summary(df_unique[, c("Budget", "Revenue", "Imdb_Rating", "Imdb_Votes", "Wins", "Nominations")])
print(as.data.frame(numerical_summary))
library(tidyr)
library(ggplot2)
library(plotly)
# Calculate correlation matrix
num_cols <- df_final %>%
select(Revenue, Budget, Imdb_Rating, Wins, Nominations)
corr_matrix <- cor(num_cols, use = "complete.obs")
# Convert correlation matrix to long format using tidyr
corr_long <- corr_matrix %>%
as.data.frame() %>%
mutate(Var1 = rownames(.)) %>%
pivot_longer(cols = -Var1,
names_to = "Var2",
values_to = "value")
# Create the interactive heatmap
heatmap <- ggplot(corr_long, aes(x = Var1, y = Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1)) +
labs(title = "Correlation Heatmap",
fill = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(heatmap)
# Summarize the Bechdel test result, Genre, and Gender with counts
bechdel_test_summary <- df_unique %>%
count(Bechdel_test_result, name = "count") %>%
rename(Category = Bechdel_test_result)
genre_summary <- df_unique %>%
count(Genre, name = "count") %>%
rename(Category = Genre)
gender_summary <- df_unique %>%
count(Gender, name = "count") %>%
rename(Category = Gender)
# Combine the summaries into a list of tables
summary_tables <- list(
Bechdel_Test_Summary = bechdel_test_summary,
Genre_Summary = genre_summary,
Gender_Summary = gender_summary
)
# Print each summary as a table
print(summary_tables$Bechdel_Test_Summary)
print(summary_tables$Genre_Summary)
print(summary_tables$Gender_Summary)
# Summarize the Bechdel test result, Genre, and Gender with counts
bechdel_test_summary <- df_unique %>%
count(Bechdel_test_result, name = "count") %>%
rename(Category = Bechdel_test_result) %>%
mutate(Variable = "Bechdel_test_result") # Add the variable name
genre_summary <- df_unique %>%
count(Genre, name = "count") %>%
rename(Category = Genre) %>%
mutate(Variable = "Genre") # Add the variable name
gender_summary <- df_unique %>%
count(Gender, name = "count") %>%
rename(Category = Gender) %>%
mutate(Variable = "Gender") # Add the variable name
# Combine the summaries into a list of tables
summary_tables <- list(
Bechdel_Test_Summary = bechdel_test_summary,
Genre_Summary = genre_summary,
Gender_Summary = gender_summary
)
# Print each summary as a table
print(summary_tables$Bechdel_Test_Summary)
print(summary_tables$Genre_Summary)
print(summary_tables$Gender_Summary)
# Summarize the Bechdel test result, Genre, and Gender with counts
bechdel_test_summary <- df_unique %>%
count(Bechdel_test_result, name = "count") %>%
rename(Category = Bechdel_test_result) %>%
mutate(Variable = "Bechdel_test_result") # Add the variable name
genre_summary <- df_unique %>%
count(Genre, name = "count") %>%
rename(Category = Genre) %>%
mutate(Variable = "Genre of the movie") # Add the variable name
gender_summary <- df_unique %>%
count(Gender, name = "count") %>%
rename(Category = Gender) %>%
mutate(Variable = "Gender of Directors") # Add the variable name
# Combine the summaries into a list of tables
summary_tables <- list(
Bechdel_Test_Summary = bechdel_test_summary,
Genre_Summary = genre_summary,
Gender_Summary = gender_summary
)
# Print each summary as a table
print(summary_tables$Bechdel_Test_Summary)
print(summary_tables$Genre_Summary)
print(summary_tables$Gender_Summary)
library(DT)
install.packages("DT")
library(DT)
# Summarize the Bechdel test result, Genre, and Gender with counts
bechdel_test_summary <- df_unique %>%
count(Bechdel_test_result, name = "count") %>%
rename(Category = Bechdel_test_result) %>%
mutate(Variable = "Bechdel_test_result") # Add the variable name
genre_summary <- df_unique %>%
count(Genre, name = "count") %>%
rename(Category = Genre) %>%
mutate(Variable = "Genre") # Add the variable name
gender_summary <- df_unique %>%
count(Gender, name = "count") %>%
rename(Category = Gender) %>%
mutate(Variable = "Gender") # Add the variable name
# Create interactive tables with DT
bechdel_test_table <- datatable(bechdel_test_summary, options = list(pageLength = 5))
genre_summary_table <- datatable(genre_summary, options = list(pageLength = 5))
gender_summary_table <- datatable(gender_summary, options = list(pageLength = 5))
# Print the interactive tables
bechdel_test_table
genre_summary_table
gender_summary_table
#install.packages("DT")
library(DT)
# Summarize the Bechdel test result, Genre, and Gender with counts
bechdel_test_summary <- df_unique %>%
count(Bechdel_test_result, name = "count") %>%
rename(Category = Bechdel_test_result) %>%
mutate(Variable = "Bechdel_test_result") # Add the variable name
genre_summary <- df_unique %>%
count(Genre, name = "count") %>%
rename(Category = Genre) %>%
mutate(Variable = "Genre of the film") # Add the variable name
gender_summary <- df_unique %>%
count(Gender, name = "count") %>%
rename(Category = Gender) %>%
mutate(Variable = "Gender of Directors") # Add the variable name
# Create interactive tables with DT
bechdel_test_table <- datatable(bechdel_test_summary, options = list(pageLength = 5))
genre_summary_table <- datatable(genre_summary, options = list(pageLength = 5))
gender_summary_table <- datatable(gender_summary, options = list(pageLength = 5))
# Print the interactive tables
bechdel_test_table
genre_summary_table
gender_summary_table
library(DT)
# Create a deduplicated dataset based on unique film titles
df_unique <- df_final %>%
group_by(Movie_Title) %>%
summarise(across(everything(), ~ first(.)))
# Summarize the number of distinct values for each column
summary_data <- df_unique %>%
summarise(across(everything(), ~ n_distinct(.)))
# Convert the summary data to an interactive table using DT
summary_data_table <- datatable(summary_data, options = list(pageLength = 5))
# Print the interactive table
summary_data_table
library(DT)
# Create a deduplicated dataset based on unique film titles
df_unique <- df_final %>%
group_by(Movie_Title) %>%
summarise(across(everything(), ~ first(.)))
# Summarize the number of distinct values for each column
summary_data <- df_unique %>%
summarise(across(everything(), ~ n_distinct(.)))
# Convert the summary data to an interactive table using DT
summary_data_table <- datatable(summary_data, options = list(pageLength = 8))
# Print the interactive table
summary_data_table
library(DT)
# Create a deduplicated dataset based on unique film titles
df_unique <- df_final %>%
group_by(Movie_Title) %>%
summarise(across(everything(), ~ first(.)))
# Summarize the number of distinct values for each column
summary_data <- df_unique %>%
summarise(across(everything(), ~ n_distinct(.)))
# Convert the summary data to an interactive table using DT
summary_data_table <- datatable(summary_data, options = list(pageLength = 5))
# Print the interactive table
summary_data_table
library(DT)
# Summarize the numerical columns
numerical_summary <- summary(df_unique[, c("Budget", "Revenue", "Imdb_Rating", "Imdb_Votes", "Wins", "Nominations")])
# Convert the summary into a data frame for easier viewing
numerical_summary_df <- as.data.frame(numerical_summary)
# Convert the numerical summary data to an interactive table using DT
numerical_summary_table <- datatable(numerical_summary_df, options = list(pageLength = 5))
# Print the interactive table
numerical_summary_table
install.packages("plotly")
library(plotly)
# Calculate correlation matrix
num_cols <- df_final %>%
select(Revenue, Budget, Imdb_Rating, Wins, Nominations)
corr_matrix <- cor(num_cols, use = "complete.obs")
# Convert correlation matrix to long format using tidyr
corr_long <- corr_matrix %>%
as.data.frame() %>%
mutate(Var1 = rownames(.)) %>%
pivot_longer(cols = -Var1,
names_to = "Var2",
values_to = "value")
# Create the interactive heatmap with correlation values on the tiles
heatmap <- ggplot(corr_long, aes(x = Var1, y = Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1)) +
geom_text(aes(label = round(value, 2)), color = "black", size = 4) + # Add correlation values on tiles
labs(title = "Correlation Heatmap",
fill = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Make the heatmap interactive using plotly
ggplotly(heatmap)
install.packages("plotly")
install.packages("plotly")
library(plotly)
# Calculate correlation matrix
num_cols <- df_final %>%
select(Revenue, Budget, Imdb_Rating, Wins, Nominations)
corr_matrix <- cor(num_cols, use = "complete.obs")
# Convert correlation matrix to long format using tidyr
corr_long <- corr_matrix %>%
as.data.frame() %>%
mutate(Var1 = rownames(.)) %>%
pivot_longer(cols = -Var1,
names_to = "Var2",
values_to = "value")
# Create the interactive heatmap with correlation values on the tiles
heatmap <- ggplot(corr_long, aes(x = Var1, y = Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1)) +
geom_text(aes(label = round(value, 2)), color = "black", size = 4) + # Add correlation values on tiles
labs(title = "Correlation Heatmap: Revenue, Budget, Imdb_Rating, Wins, Nominations ",x = "", y = "",
fill = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Make the heatmap interactive using plotly
ggplotly(heatmap)
install.packages("plotly")
library(plotly)
# Calculate correlation matrix
num_cols <- df_final %>%
select(Revenue, Budget, Imdb_Rating, Wins, Nominations)
corr_matrix <- cor(num_cols, use = "complete.obs")
# Convert correlation matrix to long format using tidyr
corr_long <- corr_matrix %>%
as.data.frame() %>%
mutate(Var1 = rownames(.)) %>%
pivot_longer(cols = -Var1,
names_to = "Var2",
values_to = "value")
# Create the interactive heatmap with correlation values on the tiles
heatmap <- ggplot(corr_long, aes(x = Var1, y = Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1)) +
geom_text(aes(label = round(value, 2)), color = "black", size = 4) + # Add correlation values on tiles
labs(title = "Correlation Heatmap: Revenue, Budget, Imdb_Rating, Wins, Nominations", x = "", y = "",
fill = "Correlation") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
axis.text.x = element_text(angle = 45, hjust = 1)
)
# Make the heatmap interactive using plotly
ggplotly(heatmap)
library(tidyr)
library(ggplot2)
library(plotly)
# Create the interactive plot with specified colors
plot <- ggplot(df_unique, aes(x = factor(Bechdel_binary), y = log(Revenue), fill = factor(Bechdel_binary))) +
geom_violin(alpha = 0.7) +
geom_boxplot(width = 0.2, alpha = 0.8, outlier.shape = NA) +
scale_fill_manual(values = c("0" = "#FF6B6B", "1" = "#4ECDC4"), labels = c("Fail", "Pass")) +
scale_x_discrete(labels = c("0" = "Fail", "1" = "Pass")) +
labs(
title = "Movie Revenue Distribution by Bechdel Test Result",
subtitle = "Log of Revenue",
x = "Bechdel Test Result",
y = "Revenue",
fill = "Test Result"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "bottom",
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
ggplotly(plot)
library(tidyr)
library(ggplot2)
library(plotly)
# Create the interactive plot
plot <- ggplot(df_final, aes(x = Genre, y = Revenue, fill = factor(Bechdel_binary))) +
geom_boxplot(outlier.shape = NA) +
scale_y_log10() +
labs(title = "Revenue Distribution by Genre and Bechdel Test Result",
x = "Genre", y = "Log of Revenue", fill = "Bechdel Test (0 = Fail, 1 = Pass)") +
scale_fill_manual(values = c("0" = "#FF7F50", "1" = "#4CAF50")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(plot)
library(plotly)
# Check for any missing or NA values in the Revenue column to ensure data integrity
df_unique <- df_unique %>% drop_na(Revenue)
# Create the interactive plot with specified colors
plot <- ggplot(df_unique, aes(x = factor(Bechdel_binary), y = log(Revenue), fill = factor(Bechdel_binary))) +
geom_violin(alpha = 0.7) +
geom_boxplot(width = 0.2, alpha = 0.8, outlier.shape = NA) +
scale_fill_manual(values = c("0" = "#FF6B6B", "1" = "#4ECDC4"), labels = c("Fail", "Pass")) +
scale_x_discrete(labels = c("0" = "Fail", "1" = "Pass")) +
labs(
title = "Movie Revenue Distribution by Bechdel Test Result",
subtitle = "Log of Revenue",
x = "Bechdel Test Result",
y = "Revenue (Log Scale)",
fill = "Test Result"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "bottom",
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
ggplotly(plot)
library(plotly)
# interactive plot
plot <- ggplot(df_final, aes(x = Genre, y = Revenue, fill = factor(Bechdel_binary))) +
geom_boxplot(outlier.shape = NA, alpha = 0.8) +  # Set transparency for better visibility
scale_y_log10() +  # Log scale to handle revenue variability
labs(
title = "Revenue Distribution by Genre and Bechdel Test Result",
subtitle = "Comparing Revenue Across Genres by Bechdel Test Outcome",
x = "Genre",
y = "Revenue (Log Scale)",
fill = "Bechdel Test Result\n(0 = Fail, 1 = Pass)"
) +
scale_fill_manual(values = c("0" = "#FF7F50", "1" = "#4CAF50"),  # Orange for Fail, Green for Pass
labels = c("Fail", "Pass")) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Centered title
plot.subtitle = element_text(hjust = 0.5, size = 10),  # Centered subtitle
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Rotate genre labels
axis.title = element_text(size = 12),
legend.position = "bottom"  # Move legend to bottom for more space
)
# Convert to interactive plot
ggplotly(plot)
library(plotly)
# interactive plot
plot <- ggplot(df_final, aes(x = Genre, y = Revenue, fill = factor(Bechdel_binary))) +
geom_boxplot(outlier.shape = NA, alpha = 0.8) +  # Set transparency for better visibility
scale_y_log10() +  # Log scale to handle revenue variability
labs(
title = "Revenue Distribution by Genre and Bechdel Test Result",
subtitle = "Comparing Revenue Across Genres by Bechdel Test Outcome",
x = "Genre",
y = "Revenue (Log Scale)",
fill = "Bechdel Test Result\n(0 = Fail, 1 = Pass)"
) +
scale_fill_manual(values = c("0" = "#FF6B6B", "1" = "#4ECDC4"),  # Orange for Fail, Green for Pass
labels = c("Fail", "Pass")) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Centered title
plot.subtitle = element_text(hjust = 0.5, size = 10),  # Centered subtitle
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Rotate genre labels
axis.title = element_text(size = 12),
legend.position = "bottom"  # Move legend to bottom for more space
)
# Convert to interactive plot
ggplotly(plot)
library(plotly)
# interactive plot
plot <- ggplot(df_final, aes(x = Genre, y = Revenue, fill = factor(Bechdel_binary))) +
geom_boxplot(outlier.shape = NA, alpha = 0.8) +  # Set transparency for better visibility
scale_y_log10() +  # Log scale to handle revenue variability
labs(
title = "Revenue Distribution by Genre and Bechdel Test Result",
subtitle = "Comparing Revenue Across Genres by Bechdel Test Outcome",
x = "Genre",
y = "Revenue (Log Scale)",
fill = "Bechdel Test Result\n(0 = Fail, 1 = Pass)"
) +
scale_fill_manual(values = c("0" = "#FF6B6B", "1" = "#4ECDC4"),  # Orange for Fail, Green for Pass
labels = c("Fail", "Pass")) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Centered title
plot.subtitle = element_text(hjust = 0.5, size = 10),  # Centered subtitle
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Rotate genre labels
axis.title = element_text(size = 12),
legend.position = "bottom"  # Move legend to bottom for more space
)
# Convert to interactive plot
ggplotly(plot)
# Load necessary libraries
library(ggplot2)
library(plotly)
# Your ggplot code
p <- ggplot(df_unique, aes(x = Imdb_Rating, y = Revenue, color = factor(Bechdel_binary))) +
geom_point(alpha = 0.6) +
geom_smooth(method = "loess", se = FALSE) +  # Add trend lines without confidence intervals
scale_y_log10() +
scale_color_manual(values = c("0" = "#FF7F50", "1" = "#4CAF50")) +  # Set colors for Bechdel_binary
labs(title = "Revenue vs. IMDb Rating by Bechdel Test Result",
x = "IMDb Rating", y = "Log of Revenue", color = "Bechdel Test (0 = Fail, 1 = Pass)") +
theme_minimal()
ggplotly(p)
library(dplyr)
library(ggplot2)
library(plotly)
# Calculate the percentage of movies passing the Bechdel test by year
df_trend <- df_unique %>%
group_by(Year) %>%
summarize(pass_rate = mean(Bechdel_binary == 1, na.rm = TRUE) * 100)
# Create the interactive plot
plot <- ggplot(df_trend, aes(x = Year, y = pass_rate)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
labs(title = "Percentage of Movies Passing the Bechdel Test Over Time",
x = "Year", y = "Percentage Passing Bechdel Test") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(plot)
library(tidyr)
library(ggplot2)
library(plotly)
# Create the interactive plot
plot <- ggplot(df_unique, aes(x = factor(Bechdel_binary), y = Imdb_Rating, fill = factor(Bechdel_binary))) +
geom_boxplot(outlier.shape = NA) +
labs(title = "IMDb Ratings by Bechdel Test Result",
x = "Bechdel Test Result (0 = Fail, 1 = Pass)", y = "IMDb Rating") +
scale_fill_manual(values = c("0" = "#FF7F50", "1" = "#4CAF50")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(plot)
library(plotly)
# Create the interactive plot
plot <- ggplot(df_unique, aes(x = Bechdel_binary, y = Wins, fill = Bechdel_binary)) +
geom_boxplot(outlier.shape = NA) +
labs(title = "Awards by Bechdel Test Result",
x = "Bechdel Test Result",
y = "Number of Awards",
fill = "Bechdel Test (0 = Fail, 1 = Pass)") +
scale_fill_manual(values = c("0" = "#FF7F50", "1" = "#4CAF50")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0,20) +  # Set y-axis limits to 0 and 45
# Add text annotation with statistics
annotate("text",
x = 1:2,
y = 45,  # Position the text at the top of the y-axis
label = paste("Mean:", round(tapply(df_final$Wins, df_final$Bechdel_binary, mean, na.rm = TRUE), 2),
"\nMedian:", round(tapply(df_final$Wins, df_final$Bechdel_binary, median, na.rm = TRUE), 2)),
vjust = -0.5)
ggplotly(plot)
library(plotly)
# Check for any missing or NA values in the Revenue column to ensure data integrity
df_unique <- df_unique %>% drop_na(Revenue)
# Create the interactive plot with specified colors
plot <- ggplot(df_unique, aes(x = factor(Bechdel_binary), y = log(Revenue), fill = factor(Bechdel_binary))) +
geom_violin(alpha = 0.7) +
geom_boxplot(width = 0.2, alpha = 0.8, outlier.shape = NA) +
scale_fill_manual(values = c("0" = "#FF7F50", "1" = "#4CAF50"), labels = c("Fail", "Pass")) +
scale_x_discrete(labels = c("0" = "Fail", "1" = "Pass")) +
labs(
title = "Movie Revenue Distribution by Bechdel Test Result",
subtitle = "Log of Revenue",
x = "Bechdel Test Result",
y = "Revenue (Log Scale)",
fill = "Test Result"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "bottom",
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
ggplotly(plot)
library(plotly)
# interactive plot
plot <- ggplot(df_final, aes(x = Genre, y = Revenue, fill = factor(Bechdel_binary))) +
geom_boxplot(outlier.shape = NA, alpha = 0.8) +  # Set transparency for better visibility
scale_y_log10() +  # Log scale to handle revenue variability
labs(
title = "Revenue Distribution by Genre and Bechdel Test Result",
subtitle = "Comparing Revenue Across Genres by Bechdel Test Outcome",
x = "Genre",
y = "Revenue (Log Scale)",
fill = "Bechdel Test Result\n(0 = Fail, 1 = Pass)"
) +
scale_fill_manual(values = c("0" = "#FF7F50", "1" = "#4CAF50"),  # Orange for Fail, Green for Pass
labels = c("Fail", "Pass")) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Centered title
plot.subtitle = element_text(hjust = 0.5, size = 10),  # Centered subtitle
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Rotate genre labels
axis.title = element_text(size = 12),
legend.position = "bottom"  # Move legend to bottom for more space
)
# Convert to interactive plot
ggplotly(plot)
load("C:/Users/Samsung/Documents/1er Semestre/Data science/Project/Bechdel-analysis/.RData")
