separate_rows(Director, sep = ", ")
# Extract Wins and Nominations
# Updated code to process each row individually
df_final <- df_final %>%
rowwise() %>%
mutate(
# Extract numbers after "Won " and before "wins"
oscar_wins = replace_na(
str_extract(Awards, "(?i)(\\d+)(?= win(s)?)") %>%
str_replace_all("Another ", "") %>%
as.numeric(),
0),
# Extract numbers before "win(s)"
other_wins = replace_na(
str_extract(Awards, "(?i)\\bWon (\\d+)") %>%
str_replace_all("Won ", "") %>%
as.numeric(),
0),
Wins = rowSums(across(c(oscar_wins, other_wins))),
oscar_nominations = replace_na(
str_extract(Awards, "(?i)\\bNominated for (\\d+)") %>%
str_replace_all("Nominated for ", "") %>%
as.numeric(),
0),
other_nominations = replace_na(
str_extract(Awards, "(?i)(\\d+)(?= nomination(s)?)") %>%
str_replace_all("Nominated ", "") %>%
as.numeric(),
0),
Nominations = rowSums(across(c(oscar_nominations, other_nominations))),
) %>%
select(-Awards, -oscar_wins, -other_wins, -oscar_nominations, -other_nominations) %>%  # Remove intermediate columns
ungroup() # Ungroup after rowwise operations
library(DT)
# Open the dataset with the names associated with a gender
df_name <- read.csv("https://query.data.world/s/vosjabgwxpybit5vkwjkyv7przl6km?dws=00000", header=TRUE, stringsAsFactors=FALSE)
# Rename column for consistency
df_name <- df_name %>%
rename(Gender = gender)
# Separate the column 'Director' in df_final into 'Name' and 'Last_Name' at the first space
df_final <- df_final %>%
separate(Director, into = c("Name", "Last_Name"), sep = " ", extra = "merge", fill = "right")
# Merge the datasets on the 'Name' column to match the director's name to a gender
df_final_gender <- df_final %>%
left_join(df_name, by = c("Name" = "name")) %>%
select(-score)  # Remove unnecessary column
# Create the interactive table
datatable(df_final_gender,
options = list(pageLength = 10,  # Number of rows
autoWidth = TRUE,
searchHighlight = TRUE),
filter = 'top')  # add search filter to the top
# Recreate a column with the directors name
df_final_gender$Director_Name <- ifelse(
is.na(df_final_gender$Last_Name),
df_final_gender$Name,
paste(df_final_gender$Name, df_final$Last_Name)
)
df_final <- df_final_gender %>%
select(-Name, -Last_Name)
# Adding a column of Bechdel_test_result as binary
df_final$Bechdel_binary <- as.factor(ifelse(df_final$Bechdel_test_result == "PASS", 1, 0))
# To make sure our EDA works we need to make sure the type of the variable is correct
# Gender, Genre, language --> to categorical
df_final[c ("Gender","Genre", "Language", "Country_of_Origin", "Bechdel_test_result", "Bechdel_binary")] <- lapply (df_final [c("Gender","Genre", "Language", "Country_of_Origin", "Bechdel_test_result", "Bechdel_binary")], as.factor)
#Revenue, Imdb_Rating,Imdb_Votes :from character to numeric
df_final$Imdb_Votes <- as.numeric(gsub(",", "", df_final$Imdb_Votes))
df_final[c("Revenue", "Imdb_Rating", "Imdb_Votes")] <- lapply(df_final[c("Revenue", "Imdb_Rating", "Imdb_Votes")], as.numeric)
# Display a table with variable names and data types only
variable_info <- data.frame(Variable = names(df_final), Type = sapply(df_final, class))
print(variable_info)
na_counts <- colSums(is.na(df_final)) ## 32 NA in Revenue and 342 in Gender
df_final <- na.omit(df_final)
# Create a deduplicated dataset based on unique film titles
df_unique <- df_final %>%
group_by(Movie_Title) %>%
summarise(across(everything(), ~ first(.)))
# Summarize the number of distinct values for each column
summary_data <- df_unique %>%
summarise(across(everything(), ~ n_distinct(.)))
# Convert the summary data to an interactive table using DT
summary_data_table <- datatable(summary_data, options = list(pageLength = 5))
# Print the interactive table
summary_data_table
# Summarize the Bechdel test result, Genre, and Gender with counts
bechdel_test_summary <- df_unique %>%
count(Bechdel_test_result, name = "count") %>%
rename(Category = Bechdel_test_result) %>%
mutate(Variable = "Bechdel_test_result") # Add the variable name
genre_summary <- df_unique %>%
count(Genre, name = "count") %>%
rename(Category = Genre) %>%
mutate(Variable = "Genre of the film") # Add the variable name
gender_summary <- df_unique %>%
count(Gender, name = "count") %>%
rename(Category = Gender) %>%
mutate(Variable = "Gender of Directors") # Add the variable name
# Create interactive tables with DT
bechdel_test_table <- datatable(bechdel_test_summary, options = list(pageLength = 5))
genre_summary_table <- datatable(genre_summary, options = list(pageLength = 5))
gender_summary_table <- datatable(gender_summary, options = list(pageLength = 5))
# Print the interactive tables
bechdel_test_table
genre_summary_table
gender_summary_table
# Summarize the numerical columns
numerical_summary <- summary(df_unique[, c("Budget", "Revenue", "Imdb_Rating", "Imdb_Votes", "Wins", "Nominations")])
# Convert the summary into a data frame for easier viewing
numerical_summary_df <- as.data.frame(numerical_summary)
# Convert the numerical summary data to an interactive table using DT
numerical_summary_table <- datatable(numerical_summary_df, options = list(pageLength = 6))
# Print the interactive table
numerical_summary_table
# Select relevant columns including Bechdel_binary (which has values 0 and 1)
num_cols <- df_unique %>%
select(Revenue, Budget, Imdb_Rating, Wins, Nominations, Bechdel_binary)  %>%
mutate(across(everything(), as.numeric))
# Calculate the correlation matrix with complete observations only
corr_matrix <- cor(num_cols, use = "complete.obs")
# Convert correlation matrix to long format for ggplot
corr_long <- corr_matrix %>%
as.data.frame() %>%
rownames_to_column(var = "Var1") %>%
pivot_longer(cols = -Var1, names_to = "Var2", values_to = "value")
# Create the heatmap with correlation values displayed on the tiles
heatmap <- ggplot(corr_long, aes(x = Var1, y = Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1)) +
geom_text(aes(label = round(value, 2)), color = "black", size = 4) +  # Display correlation values
labs(title = "Correlation Heatmap: Revenue, Budget, Imdb_Rating, Wins, Nominations, Bechdel Test",
x = "", y = "", fill = "Correlation") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
axis.text.x = element_text(angle = 45, hjust = 1)
)
# Make the heatmap interactive with Plotly
ggplotly(heatmap)
# Check for any missing or NA values in the Revenue column to ensure data integrity
df_unique <- df_unique %>% drop_na(Revenue)
# Create the interactive plot with specified colors
plot <- ggplot(df_unique, aes(x = factor(Bechdel_binary), y = log(Revenue), fill = factor(Bechdel_binary))) +
geom_violin(alpha = 0.7) +
geom_boxplot(width = 0.2, alpha = 0.8, outlier.shape = NA) +
scale_fill_manual(values = c("0" = "#FF7F50", "1" = "#4CAF50"), labels = c("Fail", "Pass")) +
scale_x_discrete(labels = c("0" = "Fail", "1" = "Pass")) +
labs(
title = "Movie Revenue Distribution by Bechdel Test Result",
subtitle = "Log of Revenue",
x = "Bechdel Test Result",
y = "Revenue (Log Scale)",
fill = "Bechdel Test Result\n(0 = Fail, 1 = Pass)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "bottom",
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
ggplotly(plot)
# interactive plot
plot <- ggplot(df_final, aes(x = Genre, y = Revenue, fill = factor(Bechdel_binary))) +
geom_boxplot(outlier.shape = NA, alpha = 0.8) +  # Set transparency for better visibility
scale_y_log10() +  # Log scale to handle revenue variability
labs(
title = "Revenue Distribution by Genre and Bechdel Test Result",
subtitle = "Comparing Revenue Across Genres by Bechdel Test Outcome",
x = "Genre",
y = "Revenue (Log Scale)",
fill = "Bechdel Test Result\n(0 = Fail, 1 = Pass)"
) +
scale_fill_manual(values = c("0" = "#FF7F50", "1" = "#4CAF50"),  # Orange for Fail, Green for Pass
labels = c("Fail", "Pass")) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Centered title
plot.subtitle = element_text(hjust = 0.5, size = 10),  # Centered subtitle
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Rotate genre labels
axis.title = element_text(size = 12),
legend.position = "bottom"  # Move legend to bottom for more space
)
# Convert to interactive plot
ggplotly(plot)
# Load necessary libraries
library(ggplot2)
library(plotly)
# Your ggplot code
p <- ggplot(df_unique, aes(x = Imdb_Rating, y = Revenue, color = factor(Bechdel_binary))) +
geom_point(alpha = 0.6) +
geom_smooth(method = "loess", se = FALSE) +  # Add trend lines without confidence intervals
scale_y_log10() +
scale_color_manual(values = c("0" = "#FF7F50", "1" = "#4CAF50")) +  # Set colors for Bechdel_binary
labs(title = "Revenue vs. IMDb Rating by Bechdel Test Result",
x = "IMDb Rating", y = "Log of Revenue", color = "Bechdel Test Result\n(0 = Fail, 1 = Pass)") +
theme_minimal()
ggplotly(p)
# Using dplyr to create summary statistics
summary_stats <- df_unique %>%
group_by(Bechdel_binary) %>%
summarise(
Mean_Wins = mean(Wins, na.rm = TRUE),
Median_Wins = median(Wins, na.rm = TRUE),
Count = n()
) %>%
mutate(
Mean_Wins = round(Mean_Wins, 2),
Median_Wins = round(Median_Wins, 2)
)
summary_stats
# Create the interactive plot
plot <- ggplot(df_unique, aes(x = Bechdel_binary, y = Wins, fill = Bechdel_binary)) +
geom_boxplot(outlier.shape = NA) +
labs(title = "Awards by Bechdel Test Result",
x = "Bechdel Test Result",
y = "Number of Awards",
fill = "Bechdel Test Result\n(0 = Fail, 1 = Pass)") +
scale_fill_manual(values = c("0" = "#FF7F50", "1" = "#4CAF50")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0,20) +  # Set y-axis limits to 0 and 45
# Add text annotation with statistics
annotate("text",
x = 1:2,
y = 45,  # Position the text at the top of the y-axis
label = paste("Mean:", round(tapply(df_final$Wins, df_final$Bechdel_binary, mean, na.rm = TRUE), 2),
"\nMedian:", round(tapply(df_final$Wins, df_final$Bechdel_binary, median, na.rm = TRUE), 2)),
vjust = -0.5)
ggplotly(plot)
# Create the interactive plot
plot <- ggplot(df_unique, aes(x = factor(Bechdel_binary), y = Imdb_Rating, fill = factor(Bechdel_binary))) +
geom_boxplot(outlier.shape = NA) +
labs(title = "IMDb Ratings by Bechdel Test Result",
x = "Bechdel Test Result", y = "IMDb Rating",  fill = "Bechdel Test Result\n(0 = Fail, 1 = Pass)") +
scale_fill_manual(values = c("0" = "#FF7F50", "1" = "#4CAF50")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(plot)
# Separate IMDb ratings into two groups based on Bechdel Test result
fail_ratings <- df_unique$Imdb_Rating[df_unique$Bechdel_binary == 0]
pass_ratings <- df_unique$Imdb_Rating[df_unique$Bechdel_binary == 1]
# Perform independent samples t-test
t_test_result <- t.test(pass_ratings, fail_ratings, alternative = "greater")
# Print the t-test result
print(t_test_result)
# Create a new dataframe with only Gender 0 and 1
df_gender <- df_unique %>%
filter(Gender %in% c(0, 1))
# Display the first few rows to check the result
# head(df_gender)
df_gender <- df_gender %>%
mutate(Director_gender = ifelse(Gender == 1, "Male", "Female"))
# Create the ggplot
plot <- ggplot(
data = df_gender,
mapping = aes(x = Director_gender, fill = Director_gender)
) +
geom_bar(width = 0.5) +  # Set bar width here
labs(
x = "Director Gender",  # Label for x-axis
y = "Count",                                   # Label for y-axis
title = "Count of Films by Director Gender",
fill = "Gender"
) +
scale_fill_manual(values = c("Female" = "#DB9ADB", "Male" = "#4062DB")) +  # Customize colors for each gender
ylim(0, 2000) +  # Set y-axis limit
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
legend.position = "right",  # Place legend on the right
legend.justification = "center"
) +
geom_text(
stat = "count",
aes(label = after_stat(count)),  # Updated from ..count.. to after_stat(count)
vjust = -3,  # Raise the count labels above the bars
position = position_dodge(width = 0.5)  # Aligns text to center of each bar width
)
# Convert to an interactive plot with plotly
interactive_plot <- ggplotly(plot)
# Display the interactive plot
interactive_plot
plot <- ggplot(
data = df_gender,
mapping = aes(x = Director_gender, y = log(Budget), fill = Director_gender)
) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if they clutter the plot
scale_fill_manual(values = c("Female" = "#DB9ADB", "Male" = "#4062DB")) +  # Color for male (0) and female (1)
labs(
title = "Budget Distribution by Director Gender",
x = "Director's Gender",
y = "Log of Budget",
fill = "Gender"
) +
theme_minimal()
# Convert the plot to an interactive plot
interactive_plot <- ggplotly(plot)
# Display the interactive plot
interactive_plot
# Run a t-test to compare the mean log-transformed budget between male and female directors
t_test_result <- t.test(log(Budget) ~ Director_gender, data = df_gender)
# Display the result
# t_test_result
# Assuming df_gender contains the Revenue and Director_gender columns
boxplot <- ggplot(df_gender, aes(x = as.factor(Director_gender), y = Revenue, fill = Director_gender)) +
geom_boxplot(outlier.color = "red", outlier.shape = 16, alpha = 0.7) +
labs(
x = "Director Gender",
y = " Log Revenue ",
title = "Revenue Distribution by Director Gender (Logarithmic Scale)"
) +
scale_y_log10() + # Apply logarithmic scale
scale_fill_manual(values = c(
"Female" = "#DB9ADB",
"Male" = "#4062DB"
)) +
theme_minimal()
# Convert the plot to an interactive plot
interactive_boxplot <- ggplotly(boxplot)
# Display the interactive box plot
interactive_boxplot
# Run a t-test to compare the mean revenue between male and female directors
t_test_result <- t.test(Revenue ~ Director_gender, data = df_gender)
# Display the result
# t_test_result
plot <- ggplot(
data = df_gender,
mapping = aes(x = Director_gender, y = Imdb_Rating, fill = Director_gender)
) +
geom_boxplot(outlier.shape = NA) +  # Hide outliers if they clutter the plot
scale_fill_manual(values = c("Female" = "#DB9ADB", "Male" = "#4062DB")) +  # Color for male (0) and female (1)
labs(
title = "Budget Distribution by Director Gender",
x = "Director's Gender",
y = "Imdb Ratings",
fill = "Gender"
) +
theme_minimal()
# Convert the plot to an interactive plot
interactive_plot <- ggplotly(plot)
# Display the interactive plot
interactive_plot
# Run a t-test to compare the mean revenue between male and female directors
t_test_result <- t.test(Imdb_Rating ~ Director_gender, data = df_gender)
# Display the result
# t_test_result
# Calculate counts and percentages by Gender and Bechdel Test result
data_gender_bechdel <- df_gender %>%
group_by(Director_gender, Bechdel_binary) %>%
summarize(count = n(), .groups = "drop") %>%
group_by(Director_gender) %>%
mutate(percentage = count / sum(count) * 100)
# Plot
plot <- ggplot(data_gender_bechdel, aes(x = as.factor(Director_gender), y = count, fill = as.factor(Bechdel_binary)))  +
geom_bar(stat = "identity", width = 0.5, position = "fill") +  # Use position = "fill" for percentage stack
labs(
x = "Director Gender",  # Label for x-axis
y = "Percentage of Movies",                    # Label for y-axis
title = "Percentage of Films Passing the Bechdel Test by Director Gender",
fill = "Bechdel Test Result\n(0 = Fail, 1 = Pass)"
) +
scale_fill_manual(values = c("0" = "#FF7F50", "1" = "#4CAF50")) +  # Customize colors for pass/fail
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10)
) +
geom_text(
aes(label = paste0(round(percentage, 1), "%")),
position = position_fill(vjust = 0.5),  # Center text within each stack
color = "white",
size = 3
)
# Convert the plot to an interactive plot
interactive_plot <- ggplotly(plot)
# Display the interactive plot
interactive_plot
# Count Bechdel_binary values grouped by Gender
counts <- df_unique %>%
group_by(Gender, Bechdel_binary) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(
Gender_desc = case_when(
Gender == 0 ~ "Female",
Gender == 1 ~ "Male",
Gender == 3 ~ "Unisex"
),
Bechdel_binary_desc = ifelse(Bechdel_binary == 0, "Fail", "Pass")
) %>%
select(Gender_desc, Bechdel_binary_desc, count)  # Select only the semantic columns
# Display the results with semantic descriptions on the left
# print(counts)
# Create a formatted table with gt
counts_table <- counts %>%
gt() %>%
tab_header(
title = "Bechdel Test Results by Director Gender"
) %>%
cols_label(
Gender_desc = "Director Gender",
Bechdel_binary_desc = "Bechdel Test Result",
count = "Count"
) %>%
fmt_number(
columns = c(count),
decimals = 0  # No decimals for count
) %>%
tab_style(
style = cell_text(weight = "bold"),
locations = cells_column_labels()
)
# Display the table
counts_table
# Run a chi-squared test to compare Bechdel test results by Director gender
table_data <- table(df_gender$Director_gender, df_gender$Bechdel_binary)
chi_squared_test <- chisq.test(table_data)
# Display the result
# chi_squared_test
# Calculate the percentage of movies passing the Bechdel test by year
df_trend <- df_unique %>%
group_by(Year) %>%
summarize(pass_rate = mean(Bechdel_binary == 1, na.rm = TRUE) * 100)
# Create the interactive plot
plot <- ggplot(df_trend, aes(x = Year, y = pass_rate)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
labs(title = "Percentage of Movies Passing the Bechdel Test Over Time",
x = "Year", y = "Percentage Passing Bechdel Test") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(plot)
# Convert columns to numeric if necessary
df_unique$Bechdel_test_result <- as.numeric(df_unique$Bechdel_test_result)
df_unique$Revenue <- as.numeric(df_unique$Revenue)
# Perform correlation test again
correlation_test <- cor.test(df_unique$Bechdel_test_result, df_unique$Revenue, method = "pearson")
print(correlation_test)
# Create a binary variable `awards` indicating whether the film won any awards (1 if Wins > 0, else 0)
df_unique$awards <- ifelse(df_unique$Wins > 0, 1, 0)
# Logistic regression for binary outcome (awards)
award_model <- glm(awards ~ Bechdel_test_result + Budget + Genre, data = df_unique, family = binomial)
summary(award_model)
# Linear regression for continuous IMDb ratings
imdb_rating_model <- lm(Imdb_Rating ~ Bechdel_test_result + Budget + Genre, data = df_unique)
summary(imdb_rating_model)
# Linear regression for Revenue (continuous outcome)
revenue_model <- lm(Revenue ~ Bechdel_test_result + Budget + Genre + Gender, data = df_unique)
summary(revenue_model)
# Logistic regression to predict the likelihood of passing the Bechdel Test based on director gender
model <- glm(Bechdel_binary ~ Gender, data = df_gender, family = binomial)
summary(model)
# interactive plot
plot <- ggplot(df_final, aes(x = Genre, y = Revenue, fill = factor(Bechdel_binary))) +
geom_boxplot(outlier.shape = NA, alpha = 0.8), position = position_dodge(width = 0.9), width = 0.7)  +  # Set transparency for better visibility
# interactive plot
plot <- ggplot(df_final, aes(x = Genre, y = Revenue, fill = factor(Bechdel_binary))) +
geom_boxplot(outlier.shape = NA, alpha = 0.8, position = position_dodge(width = 0.9), width = 0.7) +  # Adjusted position and box width
scale_y_log10() +  # Log scale to handle revenue variability
labs(
title = "Revenue Distribution by Genre and Bechdel Test Result",
subtitle = "Comparing Revenue Across Genres by Bechdel Test Outcome",
x = "Genre",
y = "Revenue (Log Scale)",
fill = "Bechdel Test Result\n(0 = Fail, 1 = Pass)"
) +
scale_fill_manual(values = c("0" = "#FF7F50", "1" = "#4CAF50"),  # Orange for Fail, Green for Pass
labels = c("Fail", "Pass")) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Centered title
plot.subtitle = element_text(hjust = 0.5, size = 10),  # Centered subtitle
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Rotate genre labels
axis.title = element_text(size = 12),
legend.position = "bottom"  # Move legend to bottom for more space
)
# Convert to interactive plot
ggplotly(plot)
plot <- ggplot(df_final, aes(x = Genre, y = Revenue, fill = factor(Bechdel_binary))) +
geom_boxplot(
outlier.shape = NA,  # Hide outliers for a cleaner plot
alpha = 0.8,
position = position_dodge(width = 0.8),  # Ensure boxplots are side by side
width = 0.6  # Control the width of each boxplot
) +
labs(
title = "Revenue Distribution by Genre and Bechdel Test Result",
subtitle = "Side-by-Side Comparison of Revenue by Genre",
x = "Genre",
y = "Revenue (in Millions)",
fill = "Bechdel Test\n(0 = Fail, 1 = Pass)"
) +
scale_y_log10() +  # Log scale to handle large variations in revenue
scale_fill_manual(
values = c("0" = "#FF7F50", "1" = "#4CAF50"),  # Orange for Fail, Green for Pass
labels = c("Fail", "Pass")
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Center title
plot.subtitle = element_text(hjust = 0.5, size = 10),  # Center subtitle
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Rotate genre labels
axis.title = element_text(size = 12),
legend.position = "bottom"  # Place legend below the plot
)
# Convert to interactive plot
interactive_plot <- ggplotly(plot)
# Display the interactive plot
interactive_plot
